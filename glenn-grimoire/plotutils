# This spell released under the terms of the GNU General Public License
# as they appear in http://www.gnu.org/licenses/gpl.txt
  VERSION=( "2.4.1" )
 CATEGORY="math development"
ATTRIBUTE="library"
   SOURCE="plotutils/$SPELL-$VERSION"
 HOMEPAGE="http://www.gnu.org/software/plotutils"
      URL="$GNU_URL"
#      REQ=( "" )
     OPTS="--enable-ps-fonts-in-pcl --enable-lj-fonts-in-ps --enable-lj-fonts-in-x --enable-libplotter --enable-libxmi"
FRESHMEAT="gnuplotutils"
DESC="The GNU plotutils package contains plotting utilities aand libraries.
The GNU plotutils package contains software for both programmers and
technical users. Its centerpiece is libplot, a powerful C/C++ function
library for exporting 2-D vector graphics in many file formats, both vector
and raster. It can also do vector graphics animations.
"

patches() {
  patch -p0 <<'EOF'
--- libplot/g_write.c~	2005-03-03 01:25:52.000000000 -0600
+++ libplot/g_write.c	2005-03-03 01:26:14.000000000 -0600
@@ -40,7 +40,7 @@
     }
 #ifdef LIBPLOTTER
   else if (data->outstream)
-    data->outstream->write(c, n);
+    data->outstream->write((char*)c, n);
 #endif
 }
 
--- libplot/i_rle.c~	2005-03-03 01:10:15.000000000 -0600
+++ libplot/i_rle.c	2005-03-03 01:16:08.000000000 -0600
@@ -78,7 +78,7 @@
   else if (rle->outstream)
     {
       rle->outstream->put ((unsigned char)(rle->oblen));
-      rle->outstream->write (&(rle->oblock[0]), rle->oblen);
+      rle->outstream->write ((char*)&(rle->oblock[0]), rle->oblen);
     }
 #endif  
 
--- libplot/z_write.c~	2005-03-03 01:43:31.000000000 -0600
+++ libplot/z_write.c	2005-03-03 01:44:14.000000000 -0600
@@ -484,7 +484,7 @@
   ostream *stream;
 
   stream = (ostream *)png_get_io_ptr (png_ptr);
-  stream->write (data, length);
+  stream->write ((char*)data, length);
 }
 
 static void
--- libplot/n_write.c~	2005-03-03 02:01:44.000000000 -0600
+++ libplot/n_write.c	2005-03-03 02:04:09.000000000 -0600
@@ -208,7 +208,7 @@
 		  linebuf[pos++] = '0';
 		if (pos >= MAX_PBM_PIXELS_PER_LINE || i == (width - 1))
 		  {
-		    stream->write (linebuf, pos);
+		    stream->write ((char*)linebuf, pos);
 		    stream->put ('\n');
 
 		    pos = 0;
@@ -253,7 +253,7 @@
 		  rowbuf[bytecount++] = outbyte;
 		}
 	      /* emit row of bytes */
-	      stream->write (rowbuf, bytecount);
+	      stream->write ((char*)rowbuf, bytecount);
 	    }
 
 	  free (rowbuf);
@@ -366,7 +366,7 @@
 		num_pixels++;
 		if (num_pixels >= MAX_PGM_PIXELS_PER_LINE || i == (width - 1))
 		  {
-		    stream->write (linebuf, pos);
+		    stream->write ((char*)linebuf, pos);
 		    stream->put ('\n');
 
 		    num_pixels = 0;
@@ -392,7 +392,7 @@
 	    {
 	      for (i = 0; i < width; i++)
 		rowbuf[i] = pixmap[j][i].u.rgb[0];
-	      stream->write (rowbuf, width);
+	      stream->write ((char*)rowbuf, width);
 	    }
 	  free (rowbuf);
 	}
@@ -514,7 +514,7 @@
 		num_pixels++;
 		if (num_pixels >= MAX_PPM_PIXELS_PER_LINE || i == (width - 1))
 		  {
-		    stream->write (linebuf, pos);
+		    stream->write ((char*)linebuf, pos);
 		    stream->put ('\n');
 
 		    num_pixels = 0;
@@ -542,7 +542,7 @@
 	      for (i = 0; i < width; i++)
 		for (component = 0; component < 3; component++)
 		  rowbuf[3 * i + component] = pixmap[j][i].u.rgb[component];
-	      stream->write (rowbuf, 3 * width);
+	      stream->write ((char*)rowbuf, 3 * width);
 	    }
 	  free (rowbuf);
 	}
EOF
}

build() {
  patches       &&
  default_build
}
